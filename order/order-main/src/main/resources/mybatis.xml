<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!--1 引入属性文件，在配置中占位使用 -->
    <context:property-placeholder location="classpath*:jdbc.properties" />

    <bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.uid}" />
		<property name="password" value="${jdbc.pwd}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="filters" value="stat" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="10" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="3" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="3" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="180000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
<!-- 		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" /> -->
		<!-- 打开removeAbandoned功能 -->
<!-- 		<property name="removeAbandoned" value="${removeAbandoned}" /> -->
		<!-- 1800秒，也就是30分钟 -->
<!-- 		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> -->
		<!-- 关闭abanded连接时输出错误日志 -->
<!-- 		<property name="logAbandoned" value="${logAbandoned}" /> -->
<!-- 		<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${publickey}" /> -->
	</bean>
	<bean id="seataDataSourceProxy" class="io.seata.rm.datasource.DataSourceProxy">
        <constructor-arg ref="datasource" />
    </bean>
    <!--3 会话工厂bean sqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="seataDataSourceProxy"></property>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="org.jiuyescm.fescartest.order.entity"></property>
        <property name="configLocation" value="classpath:/mybatis-config.xml" />
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:mappers/**/*Mapper.xml"></property>
    </bean>
    
    <!--4 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="org.jiuyescm.fescartest.order.mapper"></property>
    </bean>
    
    <!--5 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="seataDataSourceProxy"></property>
    </bean>
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--6 容器自动扫描IOC组件  -->
    <context:component-scan base-package="org.jiuyescm.fescartest.order"></context:component-scan>
    
    <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
</beans>